------------------------------------------------------------------------------------------------------------------------
Kafka
Redis
------------------------------------------------------------------------------------------------------------------------
JVM
------------------------------------------------------------------------------------------------------------------------
JUC
------------------------------------------------------------------------------------------------------------------------
设计模式应用
------------------------------------------------------------------------------------------------------------------------
框架:  Spring Springboot
------------------------------------------------------------------------------------------------------------------------
项目
------------------------------------------------------------------------------------------------------------------------



以下是专为5-10年经验的Java高级开发（上海求职）设计的面试复习提纲，结合了当前企业招聘需求及高频考点，分为 **核心知识**、**系统设计**、**实践与软技能** 三大部分，重点突出深度和实战结合。

---

### **一、Java核心与底层原理** 
1. **JVM深度调优**
   - **
   
   ）。
   - **GC机制**：CMS/G1/ZGC算法对比；GC日志分析；参数调优（`-XX:MaxGCPauseMillis`、Region大小设置）。
   - **类加载**：双亲委派机制破坏场景（Tomcat热部署）、自定义类加载器实现。
2. **并发编程高阶**
   - **线程池源码**：`ThreadPoolExecutor`参数设计（核心/最大线程数、阻塞队列选择）、拒绝策略适用场景。
   - **锁与同步**：`synchronized`锁升级流程、`ReentrantLock`的AQS实现、`StampedLock`优化读场景。
   - **并发工具**：`CompletableFuture`异步编排、`ConcurrentHashMap` JDK1.8的CAS+`synchronized`实现。
3. **新特性与性能优化**
   - **Java 8+**：Stream API并行流陷阱、`Optional`避免NPE、虚拟线程（Loom）适用高并发IO场景。
   - **性能工具**：Arthas在线诊断、JMH基准测试、JProfiler内存分析。

---

### **二、分布式与系统架构设计** 
1. **微服务与中间件**
   - **Spring生态**：Spring Boot自动配置原理（`@Conditional`）、Spring Cloud Alibaba（Nacos注册中心、Sentinel熔断）。
   - **RPC框架**：Dubbo服务暴露/引用流程、负载均衡策略（一致性哈希）、泛化调用。
   - **消息队列**：Kafka高可靠性（ISR机制）、RocketMQ事务消息、消费积压解决方案。
2. **数据库与缓存**
   - **MySQL优化**：索引失效场景（隐式类型转换）、InnoDB事务实现（MVCC+Undo Log）、分库分表（ShardingSphere）。
   - **Redis实战**：缓存击穿/雪崩解决方案（布隆过滤器、热点Key本地缓存）、Redis集群数据分片（CRC16槽位分配）。
3. **高并发设计**
   - **限流降级**：令牌桶 vs 漏桶算法、Hystrix舱壁模式。
   - **分布式事务**：Seata AT模式原理、TCC空回滚处理。
   - **一致性保障**：ZooKeeper ZAB协议、Redis分布式锁（RedLock争议点）。

---

### **三、框架与云原生技术** 
1. **主流框架源码**
   - **Spring**：IoC容器启动流程（BeanDefinition加载）、AOP动态代理选择（JDK vs CGLIB）。
   - **ORM框架**：MyBatis一级/二级缓存问题、Hibernate N+1 SQL优化。
2. **云原生与DevOps**
   - **容器化**：Docker镜像分层、K8s部署模型（Deployment/StatefulSet）。
   - **CI/CD**：Jenkins Pipeline脚本编写、GitLab CI集成SonarQube质检。
   - **服务网格**：Istio流量管理、Envoy Sidecar注入原理。

---

### **四、工程实践与软技能** 
1. **项目深度复盘**
   - **性能调优案例**：举例说明如何将Full GC时间从秒级降至毫秒级（G1调优过程）。
   - **架构设计决策**：为何选RabbitMQ而非Kafka（基于业务延迟要求）。
2. **系统设计能力**
   - **设计模式应用**：网关中的责任链模式、配置中心观察者模式。
   - **高可用设计**：多机房容灾（同城双活）、数据最终一致性方案（CDC日志同步）。
3. **软技能**
   - **技术方案表达**：用架构图说明秒杀系统设计（限流→缓存→异步扣库存）。
   - **团队协作**：如何推动代码规范落地、技术债务清理。

---

### **高频考点速查表**
| **类别**         | **必考点**                                                                 |
|------------------|--------------------------------------------------------------------------|
| **JVM**          | G1混合回收周期、元空间OOM场景、`java.lang.OutOfMemoryError: Metaspace` |
| **并发**         | `ConcurrentHashMap`扩容机制、`ThreadLocal`内存泄漏、虚拟线程调度 |
| **分布式**       | CAP理论取舍（如注册中心选AP/CP）、分布式ID生成（雪花算法时钟回拨） |
| **数据库**       | 覆盖索引优化、RR隔离级别下幻读解决（Next-Key Lock）             |
| **系统设计**     | 设计短链系统（发号策略、缓存更新）、微信红包架构               |

> **复习建议**：  
> - **原理层**：阅读源码（如Spring IoC容器初始化、`ConcurrentHashMap.putVal()`）并手绘图解流程。  
> - **实战层**：用Arthas模拟CPU飙高排查、压测Redis集群瓶颈。  
> - **面试策略**：结合项目痛点阐述技术选型（如“因数据强一致要求放弃Redis事务改用DB事务”）。  
> 上海企业对**金融级分布式**和**高并发架构**经验尤为看重，建议强化此类场景的深度复盘。