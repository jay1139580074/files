
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    BeanDefinition → 实例化 → 属性注入 → 初始化 → AOP代理 → 使用 → 销毁


---------------------------    红黑树        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    根节点必须是黑色

    每个红色节点的子节点必须是黑色（不能有两个连续的红色节点）

    从任一节点到其所有叶子节点的路径中，黑色节点数量必须相同


---------------------------    I/O 多路复用        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    阻塞 I/O：每个 socket 都要一个线程来等待数据，线程资源浪费严重。
    
    非阻塞 I/O：虽然不阻塞，但需要不断轮询，效率低。
    
    多线程/多进程：每个连接一个线程，线程切换开销大，容易崩溃。

    于是就有了 I/O 多路复用模型，它让一个线程就能高效地处理成百上千个连接
        使用传统阻塞 I/O，你需要 1000 个线程。
        使用 epoll，你只需要 1 个线程就能监听所有连接，谁有数据就处理谁。

    Java 的 Selector 就是 I/O 多路复用的抽象，底层在 Linux 上使用 epoll。 

