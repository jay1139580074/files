    @Transactional(isolation = Isolation.REPEATABLE_READ)

    Spring Isolation Level	    Description

    Isolation.DEFAULT	        Uses the default isolation level of your DB
    Isolation.READ_UNCOMMITTED	Allows dirty reads
    Isolation.READ_COMMITTED	Prevents dirty reads
    Isolation.REPEATABLE_READ	Prevents non-repeatable reads
    Isolation.SERIALIZABLE	    Full isolation, most restrictive

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


    In yml
    spring.jpa.properties.hibernate.connection.isolation=2

    1 = READ_UNCOMMITTED

    2 = READ_COMMITTED

    4 = REPEATABLE_READ

    8 = SERIALIZABLE

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

@Transactional(rollbackFor = Exception.class)


属性名	        说明
rollbackFor	        指定哪些异常触发回滚（类或数组）
noRollbackFor	指定哪些异常不触发回滚
propagation	    事务传播行为（如 REQUIRED、REQUIRES_NEW）
isolation	    事务隔离级别
timeout	        超时时间（秒）


Spring事务传播级别说明
======================

1. REQUIRED（默认）
-------------------
- 如果当前存在事务，则加入该事务。
- 如果没有事务，则新建一个事务。
- 最常用的传播行为，适合大多数业务场景。

2. SUPPORTS
-----------
- 如果当前存在事务，则加入事务。
- 如果没有事务，则以非事务方式执行。
- 适用于对事务不敏感的操作。

3. MANDATORY
------------
- 必须在一个事务中运行。
- 如果没有事务，则抛出异常。
- 适合强制要求事务上下文的场景。

4. REQUIRES_NEW
---------------
- 总是新建一个事务。
- 如果当前存在事务，则挂起当前事务。
- 适用于需要隔离处理的子操作，例如日志记录。

5. NOT_SUPPORTED
----------------
- 总是以非事务方式执行。
- 如果当前存在事务，则挂起事务。
- 适合执行不需要事务的操作，如读取缓存。

6. NEVER
--------
- 不允许在事务中运行。
- 如果当前存在事务，则抛出异常。
- 用于明确禁止事务的场景。

7. NESTED
---------
- 如果当前存在事务，则在嵌套事务中执行（使用保存点）。
- 如果没有事务，则新建一个事务。
- 适合需要部分回滚的复杂业务逻辑。

备注：
-----
- 嵌套事务（NESTED）依赖底层数据库支持保存点（Savepoint）。
- REQUIRES_NEW 会导致原事务挂起，注意资源隔离和性能影响。
- 所有传播行为都可通过 @Transactional 注解配置，例如：
  @Transactional(propagation = Propagation.REQUIRES_NEW)


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

隔离级别	           脏读 (Dirty Read)	不可重复读 (Non-repeatable Read)	幻读 (Phantom Read)	        描述
Read Uncommitted	✅ 可能发生	            ✅ 可能发生	                    ✅ 可能发生	            最低隔离级别，允许读取未提交的数据，提高性能但风险高
Read Committed	    ❌ 不会发生	            ✅ 可能发生	                    ✅ 可能发生	            默认级别（如 Oracle），只读取已提交数据
Repeatable Read	    ❌ 不会发生	            ❌ 不会发生	                    ✅ 可能发生	            MySQL 默认级别，保证读取一致，但仍可能出现幻读
Serializable	    ❌ 不会发生	            ❌ 不会发生	                    ❌ 不会发生	            最高隔离级别，完全串行化事务，性能开销最大