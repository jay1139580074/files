>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------    存储引擎        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




---------------------------    MVCC Multi Version Concurency control        >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    Read Committed（RC） ：每次查询都会生成新的 Read View
    Repeatable Read（RR）：整个事务期间使用同一个 Read View，保证多次读取一致

    隐藏字段：每行记录包含事务 ID（DB_TRX_ID）， 回滚指针（DB_ROLL_PTR）， ROW_NUM（如果没主键ID 则起作用

    Undo Log：记录数据的历史版本，支持事务回滚和快照读取
        a. InnoDB 记录每行数据修改的记录
        b. 通过DB_ROLL_PRT 指向上一次修改的记录     类似一个修改记录 链

        c. 创建：发生事务修改数据
        d. 删除：事务结束，且没有其他事务读取undo log时 --  ReadView 不被读取时， Purge 线程回收


    Read View：只读事务开始时创建的快照视图，决定当前事务能看到哪些数据版本
        a. 当前事务ID           --  trx_id        
        b. 当前未提交事务列表    --  m_ids  其中最小的： min_trx_id
        c. 未发生最大事务ID      -- 还未发生的事务 的ID  max_trx_id 

A.1 每次只读事务创建，innoDB会创建一个事务ID， 同时会创建一个全局的readview
    2. 开始判断当前事务对行数据的可读性

    进入undo log，开始对比      当前记录的 DB_TRX_ID > max_trx_id, 不可能，max_trx_id 代表未发生的事务，标记 Read View 的时间边界，防止新事务干扰
        当前记录的 DB_TRX_ID < min_trx_id
            ✅ 是：说明该版本在当前事务开始前就已提交   -→ 可见
            ❌ 否：继续判断

        当前记录的 DB_TRX_ID in m_ids
            ✅ 是：说明该版本是未提交的事务            -→ 不可见
            ❌ 否：说明该版本已提交，但在当前事务之后   -→ 不可见

        如果不可见，就通过 DB_ROLL_PTR 找到上一版本的 Undo Log，继续比较其 DB_TRX_ID

        这个过程会沿着 Undo Log 链表不断回溯，直到找到一个符合可见性规则的版本为止。

